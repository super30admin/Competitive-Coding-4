// Time Complexity : O(2N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach: Using fast and slow pointer approach

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
     ListNode target = null;
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null ){
            return true;
        }
        if(head.next.next == null){
            if(head.val == head.next.val){
                return true;
            }
            else {
                return false;
            }
        }
        ListNode p1 = head;
        ListNode p2 = head;
        while(p2 != null && p2.next != null){
            p1 = p1.next;
            p2 = p2.next.next;
        }
        p1 = reverse(p1);
        p2 = head;
        while(p1 != null && p2 != null){
            if(p2.val != p1.val){
                 return false;
            }   
           p2 = p2.next;
            p1 = p1.next;
        } 
        return true;
    }
    
    public ListNode reverse(ListNode head){
       if(head == null)
            return head;
        ListNode p1 = head;
        ListNode p2 = head.next;
        head.next = null;
        while(p2 != null){
            ListNode temp = p2.next;
            p2.next = p1;
            p1 = p2;       
            p2 = temp;
        }
        return p1;
    }
}
