// Time Complexity : o(n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
* Recursively get height of left and right subtree
* if the diff is greater than 1 , then it is not height balanced
* */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean res = true;
    public boolean isBalanced(TreeNode root) {
        helper(root);
        return res;
    }

    int helper(TreeNode root){
        if(root== null ){
            return 0;
        }

        int left = helper(root.left);
        int right = helper(root.right);
        int diff = Math.abs(left - right);
        if(diff >1){
            res = false;
        }
        return Math.max(left, right) +1;
    }
}