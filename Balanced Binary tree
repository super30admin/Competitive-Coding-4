/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean flag;
    public boolean isBalanced(TreeNode root) {
        flag = true;
        calHeight(root);
        return flag;
        
    }
    public int calHeight(TreeNode root){
        if(root==null || flag==false){
            return 0;
        }
        
        int left= calHeight(root.left);
        int right= calHeight(root.right);
        
        if(Math.abs(left-right)>1) flag=false;
        
        return Math.max(left,right)+1;
    }
}

// Time complexity:  O(n)
//Space Complexity : O(h)
//Approach: start from the bottom, compare height fo each subtree
