// Time Complexity : O(n)
// Space Complexity : O(h) h- height
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
recursive sol

// Your code here along with comments explaining your approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean isHt = true;
    public boolean isBalanced(TreeNode root) {
        
        if(root == null)
            return true;
        
       helper(root);
        
        return isHt;
    }
    
    private int helper(TreeNode root)
    {
        if(root == null)
            return 0;
        if(!isHt)
            return 0;
        
        int left_ht = helper(root.left);
        int right_ht = helper(root.right);
        
        if(Math.abs(left_ht -right_ht) <= 1)
            return (Math.max(left_ht, right_ht)+1);
        else
            isHt = false;
        
        return 0;
    }
}
