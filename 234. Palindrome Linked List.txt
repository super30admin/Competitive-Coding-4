// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
find the middle of LL
check behaviour of even and odd length and return middle accordingly
Reverse the linkedlist starting from middle and return head. now use 2 pointers one in begining and other at begining of reversed list, compare the values, if values mismatch return true, if 2nd list goes to null, return true


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode mid = middle(head);
        ListNode p2 = reverse(mid);
        ListNode p1=head;
        
        while(p2!=null){
            if(p1.val!=p2.val){
                return false;
            }
            p2=p2.next;
            p1=p1.next;
        }
        return true;
    }
    
    public ListNode middle(ListNode head){
        if(head==null) return null;
        if(head.next==null) return head;
        int count=0;
        ListNode temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
       
        ListNode slow=head;
        ListNode fast=head;
        
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        if(count%2==0){
            return slow;
        }else{
            return slow.next;
        }
    }
    
    public ListNode reverse(ListNode head){
        ListNode prev=null;
        ListNode cur=head;
        ListNode fast=head.next;
        while(fast!=null){
            cur.next=prev;
            prev=cur;
            cur=fast;
            fast=fast.next;
        }
        cur.next=prev;
        return cur;
    }
}