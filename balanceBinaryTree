/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

		//110. Balanced Binary Tree
		//Time complexity is O(n^2) because for calculating the height it iterates over it's sub trees again
		//Space is : O(h) where h is the height of the tree
		
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        
      return  isBalanced(root.left) && isBalanced(root.right) && Math.abs(height(root.left) - height(root.right)) <=1 ;        
    }
    
    private int height(TreeNode root){
        
        if(root == null)
            return 0;
        
      return  Math.max(height(root.left) ,height(root.right))+1;
    }
}