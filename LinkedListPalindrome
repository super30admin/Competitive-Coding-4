/*
TC; O(N)
SC: O(1)
 */
class LinkedListPalindrome{

    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null){
            return true;
        }
        //find mid
        ListNode slow = head;
        ListNode fast = head;

        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }

        fast = reverse(slow.next);
        slow.next = null;
        slow = head;

        while(slow!=null && fast!=null){
            if (slow.val!= fast.val){
                return false;
            }
            slow = slow.next;
            fast = fast.next;
        }

        return true;
    }

    private ListNode reverse(ListNode head){
        if (head == null || head.next == null){
            return head;
        }
        ListNode reversedNode = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return reversedNode;
    }
}